#!/usr/bin/env python3

import argparse
import gnupg
import subprocess
import sys

# Defaults
CACHE_DIR="../debian/pypi"
PIP_EXE="pip3"
REQUIREMENTS_FILE="../requirements.txt"


def build_deb(key_id):
    if (key_id is None):
        print ("No GPG key id provided! Building an unsigned deb. "
               "This cannot be uploaded to a public PPA.")
        cmd = ["debuild", "-us", "-uc"]
    else:
        print("Signing this buil with key id {}".format(key_id))
        cmd = ["debuild", "-k0x{}".format(key_id), "-S"]

    subprocess.run(cmd, check=True)

def cache_dependencies(cache_dir=CACHE_DIR,
                       pip_exe=PIP_EXE,
                       requirements_file=REQUIREMENTS_FILE):
    cmd = [PIP_EXE, "install", "--download", cache_dir, "-r", requirements_file]
    subprocess.run(cmd, check=True)

if __name__ == "__main__":
    print("\nDo you plan to upload this build to a PPA? If so, read on.")
    print("==== CHECKLIST ====")
    print("0. From within the virtual env, dump the latest dependencies with \n"
          "\tpip freeze > requirements.txt")
    print("1. Add a changelog entry and/or bump the version")
    print("2. Do not run this in a virtualenv. (This script won't let you anyway)")
    print("3. If the build succeeds, upload the bits with \n"
          "\tdput ppa:<ppa_user>/<ppa_name> <pkg_name><version_no>.source.changes")

    if (hasattr(sys, 'real_prefix')):
        print("This script must be run outside of a virtual env. "
              "Please run `deactivate` first")
        sys.exit(0)

    input("Press enter to continue....")
    gpg = gnupg.GPG()
    parser = argparse.ArgumentParser()
    parser.add_argument("--key-id", "-k", 
                        choices=[key['fingerprint'][-8:] for key in gpg.list_keys()],
                        help="The id of the key to sign the .changes file with.")

    args = parser.parse_args()

    print("Caching the virtualenv's dependencies")
    cache_dependencies()

    print("Building debian package")
    build_deb(args.key_id)
